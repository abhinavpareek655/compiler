<MULTI_LINE_COMMENT, /*sort the array */, 1>
<FUNCTION, function, 2>
<ID, bubbleSort, 2>
<LPAREN, (, 2>
<ID, arr, 2>
<COLON, :, 2>
<INT, int, 2>
<LSQBR, [, 2>
<RSQBR, ], 2>
<COMMA, ,, 2>
<ID, size, 2>
<COLON, :, 2>
<INT, int, 2>
<RPAREN, ), 2>
<ARROW, =>, 2>
<VOID, void, 2>
<LBRACE, {, 3>
<LOCAL, local, 4>
<ID, n, 4>
<COLON, :, 4>
<INT, int, 4>
<SEMICOLON, ;, 4>
<LOCAL, local, 5>
<ID, i, 5>
<COLON, :, 5>
<INT, int, 5>
<SEMICOLON, ;, 5>
<LOCAL, local, 6>
<ID, j, 6>
<COLON, :, 6>
<INT, int, 6>
<SEMICOLON, ;, 6>
<LOCAL, local, 7>
<ID, temp, 7>
<COLON, :, 7>
<INT, int, 7>
<SEMICOLON, ;, 7>
<ID, n, 8>
<ASSIGN, :=, 8>
<ID, size, 8>
<SEMICOLON, ;, 8>
<ID, i, 9>
<ASSIGN, :=, 9>
<INTLIT, 0, 9>
<SEMICOLON, ;, 9>
<ID, j, 10>
<ASSIGN, :=, 10>
<INTLIT, 0, 10>
<SEMICOLON, ;, 10>
<ID, temp, 11>
<ASSIGN, :=, 11>
<INTLIT, 0, 11>
<SEMICOLON, ;, 11>
<WHILE, while, 12>
<LPAREN, (, 12>
<ID, i, 12>
<LT, <, 12>
<ID, n, 12>
<SUBTRACTION, -, 12>
<INTLIT, 1, 12>
<RPAREN, ), 12>
<LBRACE, {, 12>
<WHILE, while, 13>
<LPAREN, (, 13>
<ID, j, 13>
<LT, <, 13>
<ID, n, 13>
<SUBTRACTION, -, 13>
<ID, i, 13>
<SUBTRACTION, -, 13>
<INTLIT, 1, 13>
<RPAREN, ), 13>
<LBRACE, {, 13>
<IF, if, 14>
<LPAREN, (, 14>
<ID, arr, 14>
<LSQBR, [, 14>
<ID, j, 14>
<RSQBR, ], 14>
<GT, >, 14>
<ID, arr, 14>
<LSQBR, [, 14>
<ID, j, 14>
<ADDITION, +, 14>
<INTLIT, 1, 14>
<RSQBR, ], 14>
<RPAREN, ), 14>
<THEN, then, 15>
<LBRACE, {, 15>
<COMMENT, // swap temp and arr[i], 16>
<ID, temp, 17>
<ASSIGN, :=, 17>
<ID, arr, 17>
<LSQBR, [, 17>
<ID, j, 17>
<RSQBR, ], 17>
<SEMICOLON, ;, 17>
<ID, arr, 18>
<LSQBR, [, 18>
<ID, j, 18>
<RSQBR, ], 18>
<ASSIGN, :=, 18>
<ID, arr, 18>
<LSQBR, [, 18>
<ID, j, 18>
<ADDITION, +, 18>
<INTLIT, 1, 18>
<RSQBR, ], 18>
<SEMICOLON, ;, 18>
<ID, arr, 19>
<LSQBR, [, 19>
<ID, j, 19>
<ADDITION, +, 19>
<INTLIT, 1, 19>
<RSQBR, ], 19>
<ASSIGN, :=, 19>
<ID, temp, 19>
<SEMICOLON, ;, 19>
<RBRACE, }, 20>
<ELSE, else, 20>
<SEMICOLON, ;, 20>
<ID, j, 21>
<ASSIGN, :=, 21>
<ID, j, 21>
<ADDITION, +, 21>
<INTLIT, 1, 21>
<SEMICOLON, ;, 21>
<RBRACE, }, 22>
<SEMICOLON, ;, 22>
<ID, i, 23>
<ASSIGN, :=, 23>
<ID, i, 23>
<ADDITION, +, 23>
<INTLIT, 1, 23>
<SEMICOLON, ;, 23>
<RBRACE, }, 24>
<SEMICOLON, ;, 24>
<RBRACE, }, 25>
<MULTI_LINE_COMMENT, /*print the array */, 27>
<FUNCTION, function, 28>
<ID, printArray, 28>
<LPAREN, (, 28>
<ID, arr, 28>
<COLON, :, 28>
<INT, int, 28>
<LSQBR, [, 28>
<RSQBR, ], 28>
<COMMA, ,, 28>
<ID, size, 28>
<COLON, :, 28>
<INT, int, 28>
<RPAREN, ), 28>
<ARROW, =>, 28>
<VOID, void, 28>
<LBRACE, {, 29>
<LOCAL, local, 30>
<ID, n, 30>
<COLON, :, 30>
<INT, int, 30>
<SEMICOLON, ;, 30>
<LOCAL, local, 31>
<ID, i, 31>
<COLON, :, 31>
<INT, int, 31>
<SEMICOLON, ;, 31>
<ID, n, 32>
<ASSIGN, :=, 32>
<ID, size, 32>
<SEMICOLON, ;, 32>
<ID, i, 33>
<ASSIGN, :=, 33>
<INTLIT, 0, 33>
<SEMICOLON, ;, 33>
<WHILE, while, 34>
<LPAREN, (, 34>
<ID, i, 34>
<LT, <, 34>
<RPAREN, ), 34>
<LBRACE, {, 34>
<WRITE, write, 35>
<LPAREN, (, 35>
<ID, arr, 35>
<LSQBR, [, 35>
<ID, i, 35>
<RSQBR, ], 35>
<RPAREN, ), 35>
<SEMICOLON, ;, 35>
<ID, i, 36>
<ASSIGN, :=, 36>
<ID, i, 36>
<ADDITION, +, 36>
<INTLIT, 1, 36>
<SEMICOLON, ;, 36>
<RBRACE, }, 37>
<SEMICOLON, ;, 37>
<RBRACE, }, 38>
<COMMENT, // main funtion to test above, 40>
<FUNCTION, function, 41>
<ID, main, 41>
<LPAREN, (, 41>
<RPAREN, ), 41>
<ARROW, =>, 41>
<VOID, void, 41>
<LBRACE, {, 42>
<LOCAL, local, 43>
<ID, arr, 43>
<COLON, :, 43>
<INT, int, 43>
<LSQBR, [, 43>
<INTLIT, 7, 43>
<RSQBR, ], 43>
<SEMICOLON, ;, 43>
<ID, arr, 44>
<LSQBR, [, 44>
<INTLIT, 0, 44>
<RSQBR, ], 44>
<ASSIGN, :=, 44>
<INTLIT, 64, 44>
<SEMICOLON, ;, 44>
<ID, arr, 45>
<LSQBR, [, 45>
<INTLIT, 1, 45>
<RSQBR, ], 45>
<ASSIGN, :=, 45>
<INTLIT, 34, 45>
<SEMICOLON, ;, 45>
<ID, arr, 46>
<LSQBR, [, 46>
<INTLIT, 2, 46>
<RSQBR, ], 46>
<ASSIGN, :=, 46>
<INTLIT, 25, 46>
<SEMICOLON, ;, 46>
<ID, arr, 47>
<LSQBR, [, 47>
<INTLIT, 3, 47>
<RSQBR, ], 47>
<ASSIGN, :=, 47>
<INTLIT, 12, 47>
<SEMICOLON, ;, 47>
<ID, arr, 48>
<LSQBR, [, 48>
<INTLIT, 4, 48>
<RSQBR, ], 48>
<ASSIGN, :=, 48>
<INTLIT, 22, 48>
<SEMICOLON, ;, 48>
<ID, arr, 49>
<LSQBR, [, 49>
<INTLIT, 5, 49>
<RSQBR, ], 49>
<ASSIGN, :=, 49>
<INTLIT, 11, 49>
<SEMICOLON, ;, 49>
<ID, arr, 50>
<LSQBR, [, 50>
<INTLIT, 6, 50>
<RSQBR, ], 50>
<ASSIGN, :=, 50>
<INTLIT, 90, 50>
<SEMICOLON, ;, 50>
<ID, printarray, 51>
<LPAREN, (, 51>
<ID, arr, 51>
<COMMA, ,, 51>
<INTLIT, 7, 51>
<RPAREN, ), 51>
<SEMICOLON, ;, 51>
<ID, bubbleSort, 52>
<LPAREN, (, 52>
<ID, arr, 52>
<COMMA, ,, 52>
<INTLIT, 7, 52>
<RPAREN, ), 52>
<SEMICOLON, ;, 52>
<ID, printarray, 53>
<LPAREN, (, 53>
<ID, arr, 53>
<COMMA, ,, 53>
<INTLIT, 7, 53>
<RPAREN, ), 53>
<SEMICOLON, ;, 53>
<RBRACE, }, 54>
<MULTI_LINE_COMMENT, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 185>
